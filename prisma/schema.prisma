generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model borrowers {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [userId], references: [id])
  loans     loans[]
}

model lenders {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [userId], references: [id])
  loans     loans[]
}

model loans {
  id                               Int         @id @default(autoincrement())
  lenderIds                        Json
  lenderId                         Int
  borrowerId                       Int
  userId                           Int
  loanMode                         String
  loanDuration                     String
  amount                           Int
  interestRate                     Int
  amountWithInterest               Int
  companyFees                      Int
  amountWithInterestAndCompanyFees Int
  monthlyInstallment               Int
  loanStartDate                    DateTime
  loanEndDate                      DateTime
  createdAt                        DateTime    @default(now())
  updatedAt                        DateTime    @updatedAt
  borrowers                        borrowers   @relation(fields: [borrowerId], references: [id])
  lenders                          lenders     @relation(fields: [lenderId], references: [id])
  users                            users       @relation(fields: [userId], references: [id])
  penalties                        penalties[]
  wallets                          wallets[]
}

model penalties {
  id            Int      @id @default(autoincrement())
  userId        Int
  loanId        Int
  month         String
  year          String
  penaltyAmount Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  loans         loans    @relation(fields: [loanId], references: [id])
  users         users    @relation(fields: [userId], references: [id])
}

model users {
  id                 Int               @id @default(autoincrement())
  name               String
  email              String            @unique
  emailVerifiedAt    DateTime?
  dateOfBirth        String?
  password           String
  role               Role
  gender             String?
  address            String?
  mobileNo           String?
  documentType       String?
  verified           String            @default("false")
  borrowerType       String?
  verificationNo     String?
  verificationPhotos Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  borrowers          borrowers[]
  lenders            lenders[]
  loans              loans[]
  password_resets    password_resets[]
  penalties          penalties[]
  wallets            wallets[]
}

model wallets {
  id        Int      @id @default(autoincrement())
  userId    Int
  loanId    Int
  balance   Int
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loans     loans    @relation(fields: [loanId], references: [id])
  users     users    @relation(fields: [userId], references: [id])
}

model password_resets {
  id         Int       @id @default(autoincrement())
  userId     Int
  email      String
  token      String
  created_at DateTime?
  users      users     @relation(fields: [userId], references: [id])

  @@index([email], name: "password_resets_email_index")
}

model laravel_migrations {
  id        Int    @id @default(autoincrement())
  migration String
  batch     Int
}

enum Role {
  admin_1
  admin_2
  admin_3
  borrower
  lender
}

// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt
